package rc4;

import armadillo.utils.axml.AutoXml.util.StreamUtil;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class RC4Util {
    private final byte[] mindex = new byte[]{
            0x64, 0x65, 0x78, 0x0A, 0x30, 0x33, 0x35, 0x00, (byte) 0xD9, 0x24, 0x14, (byte) 0xFD, 0x2F, (byte) 0x81, 0x4D, (byte) 0x8B,
            0x50, 0x48, 0x13, 0x1D, (byte) 0x8D, (byte) 0xA9, (byte) 0xCF, 0x1F, (byte) 0xF1, (byte) 0xF2, (byte) 0xDD, 0x06, (byte) 0xB4, 0x67, 0x70, (byte) 0xA1,
            0x24, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, (byte) 0xD8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, (byte) 0x84, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0xA4, 0x00, 0x00, 0x00,
            (byte) 0xA4, 0x00, 0x00, 0x00, (byte) 0xB4, 0x00, 0x00, 0x00, (byte) 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0E, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x6D, 0x69, 0x78, 0x43, 0x6C, 0x61,
            0x73, 0x73, 0x3B, 0x00, 0x12, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
            0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B, 0x00, 0x0D, 0x6D, 0x69, 0x78, 0x43, 0x6C, 0x61, 0x73,
            0x73, 0x2E, 0x6A, 0x61, 0x76, 0x61, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, (byte) 0x84, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, (byte) 0xA4, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            (byte) 0xD8, 0x00, 0x00, 0x00
    };

    private byte[] initKey(byte[] key) {
        byte[] s = new byte[256];
        for (int i = 0; i < 256; i++)
            s[i] = (byte) i;
        for (int i = 0, j = 0; i < 256; i++) {
            j = (j + (s[i] & 0xff) + (key[i % key.length] & 0xff)) & 0xff;
            byte tmp = s[i];
            s[i] = s[j];
            s[j] = tmp;
        }
        return s;
    }

    public void encrypt(byte[] in, int in_offset, byte[] out,
                        int out_offset, int len, String key) {
        int x = 0;
        int y = 0;
        byte[] s = initKey(key.getBytes());
        for (int i = 0; i < len; i++) {
            x = (x + 1) & 0xff;
            y = (y + (s[x] & 0xff)) & 0xff;
            byte tmp = s[x];
            s[x] = s[y];
            s[y] = tmp;
            int t = ((s[x] & 0xff) + (s[y] & 0xff)) & 0xff;
            int k = s[t];
            out[out_offset + i] = (byte) ((in[in_offset + i] & 0xff) ^ k);
        }
    }

    public byte[] encrypt(byte[] in, String key) {
        byte[] results = new byte[in.length];
        encrypt(in, 0, results, 0, in.length, key);
        return results;
    }


    //@Test
    public void test() throws IOException {
        byte[] bytes = StreamUtil.readBytes(new FileInputStream("C:\\Users\\Administrator\\Desktop\\classes.dex"));
        String key = "1234567890";
        byte[] results = new byte[0x70]; //加密前0x70字节
        encrypt(bytes, 0, results, 0, 0x70, key);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        outputStream.write(mindex);
        outputStream.flush();
        outputStream.write(results);
        outputStream.flush();

        byte[] old = new byte[bytes.length - 0x70];
        System.arraycopy(bytes, 0x70, old, 0, old.length);

        outputStream.write(old);
        outputStream.flush();

        FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\Administrator\\Desktop\\encrypt.0.dex");
        fileOutputStream.write(outputStream.toByteArray());
        fileOutputStream.close();
    }

    @Test
    public void sss() {
        System.out.println(-1972770780 & 4294967295L);
    }
}